{"version":3,"sources":["libs/brain.js"],"names":["DEBUG_SINGLE_LIMIT","DEBUG_SUM_LIMIT","Brain","id","options","processExited","debugLogQuotaUsed","ignoreAllEvents","process","spawnSandbox","bin","sandbox","affinity","maxMemory","stdout","setEncoding","on","handleProcessError","bind","handleProcessExit","stdin","allowStdout","handleStdoutLine","terminateProcess","err","emit","BrainError","message","exitCode","line","length","substr","indexOf","log","type","action","data","write","func","args","UserError","timeout","afterThis","p","pause","once","resolve","resume","catch","TimeoutError"],"mappings":"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","file":"brain.js","sourcesContent":["import { EventEmitter2 } from 'eventemitter2';\nimport byline from 'byline';\n\nimport errors from './errors';\nimport utils from './utils';\n\nconst DEBUG_SINGLE_LIMIT = 16 * 1024 + 10;\nconst DEBUG_SUM_LIMIT = 256 * 1024;\n\nexport default class Brain extends EventEmitter2 {\n  constructor(id, options) {\n    super();\n    this.id = id;\n    this.processExited = false;\n    this.debugLogQuotaUsed = 0;\n    this.ignoreAllEvents = false;\n\n    this.process = utils.spawnSandbox(options.bin, [], options.sandbox, {\n      affinity: options.affinity,\n      maxMemory: options.maxMemory,\n    });\n    this.process.stdout.setEncoding('utf8');\n    this.process.on('error', this.handleProcessError.bind(this));\n    this.process.on('exit', this.handleProcessExit.bind(this));\n    this.process.stdin.on('error', this.handleProcessError.bind(this));\n    this.process.stdout.on('error', this.handleProcessError.bind(this));\n\n    this.allowStdout = false;\n    this.stdout = byline(this.process.stdout);\n    this.stdout.on('data', this.handleStdoutLine.bind(this));\n  }\n\n  kill() {\n    if (this.processExited) {\n      return;\n    }\n    utils.terminateProcess(this.process);\n    this.processExited = true;\n  }\n\n  handleProcessError(err) {\n    if (this.processExited || this.ignoreAllEvents) {\n      return;\n    }\n    this.emit('error', new errors.BrainError(this.id, `Brain process error: ${err.message}`));\n  }\n\n  handleProcessExit(exitCode) {\n    if (this.processExited || this.ignoreAllEvents) {\n      return;\n    }\n    this.emit('exit', exitCode);\n  }\n\n  handleStdoutLine(line) {\n    if (this.processExited || this.ignoreAllEvents) {\n      return;\n    }\n    if (line.length > DEBUG_SINGLE_LIMIT) {\n      line = line.substr(0, DEBUG_SINGLE_LIMIT);\n    }\n    if (line.indexOf('DEBUG') === 0) {\n      if (this.debugLogQuotaUsed > this.DEBUG_SUM_LIMIT) {\n        return;\n      }\n      const message = line.substr(6);\n      this.debugLogQuotaUsed += message.length;\n      utils.log('debug', { type: 'brainDebug', id: this.id, message });\n      return;\n    }\n    utils.log('debug', { action: 'receiveResponse', id: this.id, data: line });\n    if (!this.allowStdout) {\n      this.emit('error', new errors.BrainError(this.id, `Not allowed to respond, but received \"${line}\".`));\n      return;\n    }\n    this.emit('response', line);\n  }\n\n  writeInstruction(line) {\n    utils.log('debug', { action: 'sendRequest', id: this.id, data: line });\n    this.process.stdin.write(`${line}\\n`);\n  }\n\n  async emitErrorOnException(func, ...args) {\n    try {\n      await func(args);\n    } catch (e) {\n      if (!(e instanceof errors.UserError)) {\n        throw e;\n      }\n      let err = e;\n      if (e instanceof errors.UserError) {\n        if (!(e instanceof errors.BrainError)) {\n          err = new errors.BrainError(this.id, e.message);\n        }\n      }\n      this.emit('error', err);\n      throw err;\n    }\n  }\n\n  waitForOneResponse(timeout = 0, afterThis = function () {}) {\n    let p = new Promise(resolve => {\n      this.process.stdout.pause();\n      this.allowStdout = true;\n\n      afterThis();\n\n      this.once('response', data => {\n        this.allowStdout = false;\n        resolve(data);\n      });\n      this.process.stdout.resume();\n    });\n    if (timeout > 0) {\n      p = p\n        .timeout(timeout)\n        .catch(Promise.TimeoutError, e => {\n          throw new errors.BrainError(this.id, `Response timeout. Expect a response within ${timeout}ms.`);\n        });\n    }\n    return p;\n  }\n\n}\n"]}