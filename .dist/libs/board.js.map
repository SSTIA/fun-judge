{"version":3,"sources":["libs/board.js"],"names":["derives","STATE_GOING","STATE_WIN","STATE_DRAW","Board","fieldText","FIELD_BLACK","FIELD_WHITE","field","width","height","nInRow","log","action","clear","board","map","Array","fill","FIELD_BLANK","order","currentOrder","nextField","state","BOARD_STATE_GOING","file","places","JSON","parse","readFileSync","toString","e","UserError","fieldStat","forEach","place","x","y","row","push","getOppositeField","position","move","ended","getCurrentState","winningStones","BOARD_STATE_DRAW","BOARD_STATE_WIN_BLACK","BOARD_STATE_WIN_WHITE","info","dx","dy","count","x0","y0","stones","dir"],"mappings":"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","file":"libs/board.js","sourcesContent":["import fs from 'fs';\nimport assert from 'assert';\nimport _ from 'lodash';\n\nimport errors from './errors';\nimport utils from './utils';\n\nconst derives = [[0, 1], [1, 0], [1, 1], [1, -1]];\n\nconst STATE_GOING = 0;\nconst STATE_WIN = 1;\nconst STATE_DRAW = 2;\n\nexport default class Board {\n\n  static FIELD_BLANK = 0;\n  static FIELD_BLACK = 1;\n  static FIELD_WHITE = 2;\n\n  static BOARD_STATE_GOING = 0;\n  static BOARD_STATE_WIN_BLACK = 1;\n  static BOARD_STATE_WIN_WHITE = 2;\n  static BOARD_STATE_DRAW = 3;\n\n  static translateField(fieldText) {\n    assert(fieldText === 'black' || fieldText === 'white');\n    if (fieldText === 'black') {\n      return Board.FIELD_BLACK;\n    } else if (fieldText === 'white') {\n      return Board.FIELD_WHITE;\n    }\n  }\n\n  static getOppositeField(field) {\n    assert(field === Board.FIELD_BLACK || field === Board.FIELD_WHITE);\n    if (field === Board.FIELD_BLACK) {\n      return Board.FIELD_WHITE;\n    } else if (field === Board.FIELD_WHITE) {\n      return Board.FIELD_BLACK;\n    }\n  }\n\n  constructor(width, height, nInRow) {\n    assert(width > 0);\n    assert(height > 0);\n    assert(nInRow > 1);\n    utils.log('debug', { action: 'createBoard', width, height, nInRow });\n    this.width = width;\n    this.height = height;\n    this.nInRow = nInRow;\n    this.clear();\n  }\n\n  clear() {\n    this.board = _.map(new Array(this.height), row => _.fill(new Array(this.width), Board.FIELD_BLANK));\n    this.order = _.map(new Array(this.height), row => _.fill(new Array(this.width), 0));\n    this.currentOrder = 0;\n    this.nextField = Board.FIELD_BLACK;\n    this.state = Board.BOARD_STATE_GOING;\n  }\n\n  clearFromFile(file) {\n    this.clear();\n    let places;\n    try {\n      places = JSON.parse(fs.readFileSync(file).toString());\n    } catch (e) {\n      throw new errors.UserError('Failed to read or parse the file.');\n    }\n    const fieldStat = {\n      [Board.FIELD_BLACK]: 0,\n      [Board.FIELD_WHITE]: 0,\n    };\n    places.forEach(place => {\n      const [x, y, field] = place;\n      if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n        throw new errors.UserError(`Invalid place at (${x}, ${y})`);\n      }\n      if (field !== Board.FIELD_BLACK && field !== Board.FIELD_WHITE) {\n        throw new errors.UserError(`Invalid field value ${field}`);\n      }\n      if (this.board[y][x] !== Board.FIELD_BLANK) {\n        throw new errors.UserError(`Duplicate place at (${x}, ${y})`);\n      }\n      this.board[y][x] = field;\n      fieldStat[field]++;\n    });\n    if (fieldStat[Board.FIELD_BLACK] === fieldStat[Board.FIELD_WHITE]) {\n      this.nextField = Board.FIELD_BLACK;\n    } else if (fieldStat[Board.FIELD_BLACK] === fieldStat[Board.FIELD_WHITE] + 1) {\n      this.nextField = Board.FIELD_WHITE;\n    } else {\n      throw new errors.UserError(`Invalid initial state, black = ${fieldStat[Board.FIELD_BLACK]}, white = ${fieldStat[Board.FIELD_WHITE]}.`);\n    }\n    utils.log('debug', { action: 'clearBoard', board: this.board, nextField: this.nextField });\n  }\n\n  getCurrentPlaces() {\n    const places = [];\n    this.board.forEach((row, y) => {\n      row.forEach((field, x) => {\n        if (field !== Board.FIELD_BLANK) {\n          places.push({ x, y, field });\n        }\n      });\n    });\n    return places;\n  }\n\n  place(x, y) {\n    assert(this.state === Board.BOARD_STATE_GOING);\n\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      throw new errors.UserError(`Invalid move. Movement position out of board.`);\n    }\n    if (this.board[y][x] !== Board.FIELD_BLANK) {\n      throw new errors.UserError(`Invalid move. There is already a stone at position (${x}, ${y}).`);\n    }\n\n    const field = this.nextField;\n    this.board[y][x] = field;\n    this.order[y][x] = ++this.currentOrder;\n    this.nextField = Board.getOppositeField(field);\n\n    utils.log('debug', { action: 'place', position: [x, y], field });\n\n    const move = { x, y, ended: false };\n    const [ state, winningStones ] = this.getCurrentState(x, y, field);\n    if (state === STATE_WIN || state === STATE_DRAW) {\n      move.ended = true;\n      if (state === STATE_DRAW) {\n        this.state = Board.BOARD_STATE_DRAW;\n      } else {\n        if (field === Board.FIELD_BLACK) {\n          this.state = Board.BOARD_STATE_WIN_BLACK;\n        } else {\n          this.state = Board.BOARD_STATE_WIN_WHITE;\n        }\n      }\n    }\n\n    if (move.ended) {\n      const info = { action: 'roundEnd', board: this.board };\n      if (state === STATE_WIN) {\n        info.winningStones = winningStones;\n      }\n      utils.log('debug', info);\n    }\n\n    return move;\n  }\n\n  getCurrentState(x, y, field) {\n    for (const [dx, dy] of derives) {\n      let count = 1;\n      let x0, y0;\n      let stones = [[x, y]];\n      for (const dir of [1, -1]) {\n        x0 = x + dir * dx;\n        y0 = y + dir * dy;\n        while (x0 >= 0 && x0 < this.width && y0 >= 0 && y0 < this.height && this.board[y0][x0] === field) {\n          count++;\n          stones.push([x0, y0]);\n          x0 += dir * dx;\n          y0 += dir * dy;\n        }\n      }\n      if (count >= this.nInRow) {\n        return [STATE_WIN, stones];\n      }\n    }\n    for (const row of this.board) {\n      for (const field of row) {\n        if (field !== Board.FIELD_BLANK) {\n          return [STATE_GOING];\n        }\n      }\n    }\n    return [STATE_DRAW];\n  }\n\n}\n"],"sourceRoot":"/source/"}