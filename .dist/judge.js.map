{"version":3,"sources":["judge.js"],"names":["config","JSON","readFile","toString","argvConfig","parse","log","message","shutdown","EXIT_ERROR","MSG_CAUSED_BY_SYS","BRAIN_IDS","id","brainsConfig","field","translateField","getOppositeField","forEach","bin","undefined","accessSync","constants","X_OK","ignore","core","parseInt","isNaN","moveTimeout","DEFAULT_MOVE_TIMEOUT","roundTimeout","DEFAULT_ROUND_TIMEOUT","memoryLimit","DEFAULT_MEMORY_LIMIT","roundConfig","width","DEFAULT_BOARD_WIDTH","height","DEFAULT_BOARD_HEIGHT","winningStones","DEFAULT_WINNING_STONES","action","board","clearFromFile","brain","sandbox","affinity","maxMemory","maxTime","on","handleBrainError","err","handleBrainExit","code","brains","hasShutdown","places","getCurrentPlaces","all","map","emitErrorOnException","waitForOneResponse","DEFAULT_START_TIMEOUT","writeInstruction","place","x","y","resp","UserError","currentBrainId","nextField","lastMove","ended","m","match","move","state","BOARD_STATE_DRAW","EXIT_DRAW","BOARD_STATE_WIN_BLACK","FIELD_BLACK","EXIT_B0_WIN","EXIT_B1_WIN","BOARD_STATE_WIN_WHITE","FIELD_WHITE","Error","ignoreAllEvents","main","exitCode","causedBy","kill","summary","summaryData","exitCausedBy","currentBoard","boardOrder","order","writeFileSync","process","exit","type","error","getCodeForBrainLose","catch","e","stack"],"mappings":"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","file":"judge.js","sourcesContent":["import _ from 'lodash';\nimport fs from 'fs';\nimport fsp from 'fs-promise';\nimport async from 'async';\nimport { argv } from 'yargs';\n\nimport utils from './libs/utils';\nimport Brain from './libs/brain';\nimport Board from './libs/board';\nimport errors from './libs/errors';\nimport exitCode from './libs/exitCode';\n\nconst MSG_CAUSED_BY_SYS = 'Judge system internal error';\n\nconst DEFAULT_BOARD_WIDTH = 20;\nconst DEFAULT_BOARD_HEIGHT = 20;\nconst DEFAULT_WINNING_STONES = 5;\nconst DEFAULT_START_TIMEOUT = 5000;\nconst DEFAULT_MOVE_TIMEOUT = 5000;\nconst DEFAULT_ROUND_TIMEOUT = 180000;\nconst DEFAULT_MEMORY_LIMIT = 350 * 1024 * 1024;\n\nconst BRAIN_IDS = [\"0\", \"1\"];\n\nconst roundConfig = {};\nconst brains = {};\nconst brainsConfig = {};\n\nlet board = null;\nlet argvConfig = {};\nlet hasShutdown = false;\n\nfunction shutdown(exitCode, causedBy) {\n  utils.log('debug', { action: 'shutdown', exitCode, causedBy });\n  _.forEach(brains, brain => {\n    brain.ignoreAllEvents = true;\n    brain.kill();\n  });\n\n  if (argvConfig && argvConfig.summary) {\n    const summaryData = {\n      exitCausedBy: causedBy,\n      currentBoard: board ? board.board : null,\n      boardOrder: board ? board.order : null,\n      roundConfig,\n    };\n    fs.writeFileSync(argvConfig.summary, JSON.stringify(summaryData));\n  }\n\n  hasShutdown = true;\n  process.exit(exitCode);\n}\n\nfunction handleBrainError(id, err) {\n  utils.log('info', { type: 'brainError', error: err.message, id });\n  shutdown(exitCode.getCodeForBrainLose(id), `Brain ${id} error: ${err.message}`);\n}\n\nfunction handleBrainExit(id) {\n  utils.log('info', { type: 'brainProcessExit', id });\n  shutdown(exitCode.getCodeForBrainLose(id), `Brain ${id} process terminated`);\n}\n\nasync function main() {\n  if (argv.config) {\n    try {\n      argvConfig = JSON.parse((await fsp.readFile(argv.config)).toString());\n    } catch (err) {\n      utils.log('error', { message: `Failed to parse config from \"argv.config\": ${err.message}` });\n      shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n      return;\n    }\n  } else {\n    argvConfig = argv;\n  }\n  for (const id of BRAIN_IDS) {\n    brainsConfig[id] = {};\n  }\n  brainsConfig[0].field = argvConfig['brain0.field'];\n  if (brainsConfig[0].field !== 'black' && brainsConfig[0].field !== 'white') {\n    utils.log('error', { message: `Invalid argument \"brain0.field\", expecting \"black\" or \"white\", but received ${brainsConfig[0].field}` });\n    shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n    return;\n  }\n  // translate text to constant\n  brainsConfig[0].field = Board.translateField(brainsConfig[0].field);\n  brainsConfig[1].field = Board.getOppositeField(brainsConfig[0].field);\n\n  _.forEach(brainsConfig, (config, id) => {\n    config.bin = argvConfig[`brain${id}.bin`];\n    if (config.bin === undefined) {\n      utils.log('error', { message: `Missing argument \"brain${id}.bin\"` });\n      shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n      return;\n    }\n    try {\n      fsp.accessSync(config.bin, fsp.constants.X_OK);\n    } catch (ignore) {\n      utils.log('error', { message: `Unable to access \"${config.bin}\"` });\n      shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n      return;\n    }\n    config.core = parseInt(argvConfig[`brain${id}.core`]);\n    if (isNaN(config.core)) {\n      config.core = false;\n    }\n    config.moveTimeout = parseInt(argvConfig[`brain${id}.moveTimeout`]);\n    if (isNaN(config.moveTimeout)) {\n      config.moveTimeout = DEFAULT_MOVE_TIMEOUT;\n    }\n    config.roundTimeout = parseInt(argvConfig[`brain${id}.roundTimeout`]);\n    if (isNaN(config.roundTimeout)) {\n      config.roundTimeout = DEFAULT_ROUND_TIMEOUT;\n    }\n    config.memoryLimit = parseInt(argvConfig[`brain${id}.memoryLimit`]);\n    if (isNaN(config.memoryLimit)) {\n      config.memoryLimit = DEFAULT_MEMORY_LIMIT;\n    }\n  });\n\n  roundConfig.width = parseInt(argvConfig['round.width']);\n  if (isNaN(roundConfig.width)) {\n    roundConfig.width = DEFAULT_BOARD_WIDTH;\n  }\n  roundConfig.height = parseInt(argvConfig['round.height']);\n  if (isNaN(roundConfig.height)) {\n    roundConfig.height = DEFAULT_BOARD_HEIGHT;\n  }\n  roundConfig.winningStones = parseInt(argvConfig['round.winningStones']);\n  if (isNaN(roundConfig.winningStones)) {\n    roundConfig.winningStones = DEFAULT_WINNING_STONES;\n  }\n\n  utils.log('debug', { action: 'initialize', roundConfig: roundConfig, brainsConfig: brainsConfig });\n\n  board = new Board(roundConfig.width, roundConfig.height, roundConfig.winningStones);\n  try {\n    board.clearFromFile(argvConfig.board);\n  } catch (err) {\n    utils.log('error', { message: `Unable to create board: ${err.message}` });\n    shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n    return;\n  }\n\n  // Spawn brain processes\n  _.forEach(brainsConfig, (config, id) => {\n    const brain = new Brain(id, {\n      bin: config.bin,\n      sandbox: argvConfig.sandbox,\n      affinity: config.core,\n      maxMemory: config.memoryLimit,\n      maxTime: config.roundTimeout,  // TODO\n    });\n    brain.on('error', err => handleBrainError(id, err));\n    brain.on('exit', code => handleBrainExit(id, code));\n    brain.config = config;\n    brains[id] = brain;\n  });\n\n  if (hasShutdown) {\n    return;\n  }\n\n  // Send START to both side\n  try {\n    const places = board.getCurrentPlaces();\n    await Promise.all(_.map(brains, brain => brain.emitErrorOnException(async () => {\n      const resp = await brain.waitForOneResponse(DEFAULT_START_TIMEOUT, () => {\n        brain.writeInstruction('START');\n        places.forEach(place => {\n          const field = place.field === brain.config.field ? 1 : 2;\n          brain.writeInstruction(`PLACE ${place.x} ${place.y} ${field}`);\n        });\n        brain.writeInstruction('DONE');\n      });\n      if (resp !== 'OK') {\n        throw new errors.UserError(`Expect \"OK\", but received \"${resp}\"`);\n      }\n    })));\n  } catch (err) {\n    if (err instanceof errors.UserError) {\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  // Send BEGIN or TURN\n  let currentBrainId = brains[0].config.field === board.nextField ? 0 : 1;\n  let lastMove = null;\n  while (!hasShutdown && (lastMove === null || lastMove.ended === false)) {\n    try {\n      const brain = brains[currentBrainId];\n      await brain.emitErrorOnException(async () => {\n        const resp = await brain.waitForOneResponse(brain.config.moveTimeout, () => {\n          if (lastMove === null) {\n            brain.writeInstruction('BEGIN');\n          } else {\n            brain.writeInstruction(`TURN ${lastMove.x} ${lastMove.y}`);\n          }\n        });\n        const m = resp.match(/^(\\d+) (\\d+)$/);\n        if (!m) {\n          throw new errors.UserError(`Invalid response. Expect a movement like \"[X] [Y]\".`);\n        }\n        const move = board.place(parseInt(m[1]), parseInt(m[2]));\n        lastMove = move;\n        currentBrainId = 1 - currentBrainId;\n      });\n    } catch (err) {\n      if (err instanceof errors.UserError) {\n        return;\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  // Round ended\n  let code;\n  if (board.state === Board.BOARD_STATE_DRAW) {\n    code = exitCode.EXIT_DRAW;\n  } else if (board.state === Board.BOARD_STATE_WIN_BLACK) {\n    if (brains[0].config.field === Board.FIELD_BLACK) {\n      code = exitCode.EXIT_B0_WIN;\n    } else {\n      code = exitCode.EXIT_B1_WIN;\n    }\n  } else if (board.state === Board.BOARD_STATE_WIN_WHITE) {\n    if (brains[0].config.field === Board.FIELD_WHITE) {\n      code = exitCode.EXIT_B0_WIN;\n    } else {\n      code = exitCode.EXIT_B1_WIN;\n    }\n  } else {\n    throw new Error(`Invalid board state ${board.state}`);\n  }\n\n  _.forEach(brain => brain.ignoreAllEvents = true);\n  shutdown(code, '(normal round exit)');\n\n  // TODO: match timeout and memory limit\n}\n\nmain()\n  .catch(e => {\n    utils.log('error', { message: `Uncaught system exception: ${e.stack}` });\n    shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n  });\n"]}